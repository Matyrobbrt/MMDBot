import java.time.OffsetDateTime
import java.time.ZoneOffset

plugins {
    id 'application'
    id 'java-library'
    // id 'maven'
    id 'eclipse'
    id 'idea'
    alias(libs.plugins.shadow)
    alias(libs.plugins.licenser)
    id 'org.openjfx.javafxplugin' version '0.0.11'
    alias(libs.plugins.lombok)
}

sourceSets {
    common {}
    client {}
    server {}
}

configurations {
    global
    commonImplementation.extendsFrom(global)
    clientImplementation.extendsFrom(global)
    serverImplementation.extendsFrom(global)

    globalCompile
    commonCompileOnly.extendsFrom(globalCompile)
    commonCompileOnly.extendsFrom(globalCompile)
    commonCompileOnly.extendsFrom(globalCompile)

    clientImplementation.extendsFrom(commonImplementation)
    serverImplementation.extendsFrom(commonImplementation)
}

java.toolchain.languageVersion = JavaLanguageVersion.of(16)

application {
    mainClass.set('com.mcmoddev.mmdbot.dashboard.client.Startup')
}

repositories {
    mavenCentral()
    maven {
        url "https://clojars.org/repo/"
    }
    maven { url 'https://jitpack.io' }
}

javafx {
    version = "16"
    modules = ['javafx.controls', 'javafx.fxml', 'javafx.swing', 'javafx.graphics', 'javafx.web']
    configuration = "global"
}

license {
    ignoreFailures = true // Temporarily downgrade license header violations to warnings, because in-flux development
    header = rootProject.file('LicenseHeader.md')
    include '**/*.java'
    include '**/*.kt'
    exclude '**/package-info.java'
    exclude '**/module-info.java'
    newLine = false
    properties {
        year = OffsetDateTime.now(ZoneOffset.UTC).withNano(0).getYear()
    }
}

dependencies {
    global libs.guava
    global libs.slf4japi
    global libs.fastutil
    global libs.kryonet
    global libs.kryo

    globalCompile libs.lombok

    serverImplementation sourceSets.common.output
    clientImplementation sourceSets.common.output

    clientImplementation libs.logback

    api sourceSets.server.output
    api sourceSets.common.output
}
