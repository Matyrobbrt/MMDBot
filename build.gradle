import java.text.SimpleDateFormat

plugins {
  id 'application'
  // id 'maven'
  id 'eclipse'
  id 'idea'
  id 'checkstyle'
  id 'pmd'
  alias(libs.plugins.spotbugs)
  alias(libs.plugins.shadow)
  alias(libs.plugins.flyway)
  alias(libs.plugins.licenser)
  alias(libs.plugins.kotlin)
  // alias(libs.plugins.lombok)
}

group 'com.mcmoddev'
version project.bot_version

java.toolchain.languageVersion = JavaLanguageVersion.of(16)

application {
  mainClass = 'com.mcmoddev.mmdbot.core.RunBots'
}

compileJava {
  sourceCompatibility = targetCompatibility = JavaVersion.VERSION_16
  options.encoding = 'UTF-8'
}

tasks.withType(JavaCompile) {
  options.encoding = 'UTF-8'
  options.compilerArgs = [
    '-Xlint:all', // deprecation, rawtypes, cast, unchecked, all
    //'-Xdiags:verbose',
    //'-Werror'
  ]
  compileJava.options.compilerArgs += '-proc:none'
}

configurations {
  shade
  implementation.extendsFrom(shade)

  d4j
  loggingImplementation.extendsFrom(d4j)

  global
  implementation.extendsFrom(global)
  watcherImplementation.extendsFrom(global)
  commanderImplementation.extendsFrom(global)
  coreImplementation.extendsFrom(global)
  mainImplementation.extendsFrom(global)

  jda
  watcherImplementation.extendsFrom(jda)
  commanderImplementation.extendsFrom(jda)
  coreImplementation.extendsFrom(jda)
  mainImplementation.extendsFrom(jda)

  globalCompile
  watcherCompileOnly.extendsFrom(globalCompile)
  commanderCompileOnly.extendsFrom(globalCompile)
  coreCompileOnly.extendsFrom(globalCompile)
  mainCompileOnly.extendsFrom(globalCompile)
}

sourceSets {
  core {
    java {
      srcDirs = [
              "$rootDir/src/core/java"
      ]
    }
    resources {
      srcDirs = [
              "$rootDir/src/core/resources"
      ]
    }
    runtimeClasspath += sourceSets.core.output
  }
  main {
    compileClasspath += configurations.getByName("jda")
    runtimeClasspath += configurations.getByName("jda")

    compileClasspath += sourceSets.core.output
    runtimeClasspath += sourceSets.core.output
  }
  logging {
    java {
      srcDirs = [
              "$rootDir/src/logging/java"
      ]
    }
    resources {
      srcDirs = [
              "$rootDir/src/logging/resources"
      ]
    }
    compileClasspath += configurations.getByName("global")
    runtimeClasspath += configurations.getByName("global")

    compileClasspath += sourceSets.core.output
    runtimeClasspath += sourceSets.core.output
  }
  commander {
    java {
      srcDirs = [
              "$rootDir/src/commander/java"
      ]
    }
    resources {
      srcDirs = [
              "$rootDir/src/commander/resources"
      ]
    }
    compileClasspath += configurations.getByName("global")
    runtimeClasspath += configurations.getByName("global")

    compileClasspath += sourceSets.core.output
    runtimeClasspath += sourceSets.core.output
  }
  watcher {
    java {
      srcDirs = [
              "$rootDir/src/watcher/java"
      ]
    }
    resources {
      srcDirs = [
              "$rootDir/src/watcher/resources"
      ]
    }
    compileClasspath += configurations.getByName("global")
    runtimeClasspath += configurations.getByName("global")

    compileClasspath += sourceSets.core.output
    runtimeClasspath += sourceSets.core.output
  }
  core {
    runtimeClasspath += sourceSets.main.output
    runtimeClasspath += sourceSets.logging.output
    runtimeClasspath += sourceSets.watcher.output
    runtimeClasspath += sourceSets.commander.output
    runtimeClasspath += configurations.getByName("d4j")
  }
}

repositories {
  mavenCentral()
  //jcenter()
  maven {
    name 'm2-dv8tion'
    url 'https://m2.dv8tion.net/releases'
  }
  maven {
    name 'jda-chewtils'
    url 'https://m2.chew.pro/snapshots'
  }
  maven {
    name 'fabric'
    url 'https://maven.fabricmc.net'
  }
  maven {
    name 'quilt'
    url 'https://maven.quiltmc.org/repository/snapshot'
  }
  maven {
    name 'jitpack'
    url 'https://jitpack.io'
  }
}

dependencies {
  // globalCompile libs.lombok

  jda libs.jda
  jda libs.chewtils

  d4j libs.discord4j

  global libs.guava
  global libs.gson
  global libs.logback
  global libs.nightconfig
  global libs.sqlite
  global libs.flyway
  global libs.graal
  global libs.graal.scriptengine
  global libs.reflections

  globalCompile libs.annotations

  global libs.jdbi.core
  global libs.jdbi.sqlobject

  testImplementation libs.junit

  spotbugsPlugins libs.findsecbugs
}

shadowJar {
  from sourceSets.core.output
  configurations = [project.configurations.jda, project.configurations.global]
}

jar {
  from sourceSets.core.output

  manifest {
    mainAttributes(
      'Maven-Artifact': "${project.group}:${archivesBaseName}:${project.bot_version}",
      'Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
      'Specification-Title': archivesBaseName,
      'Specification-Vendor': 'Minecraft Mod Development',
      'Specification-Version': '1',
      'Implementation-Title': archivesBaseName,
      'Implementation-Version': "${project.bot_version}",
      'Implementation-Vendor': 'Minecraft Mod Development',
      'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
      'Built-On-Java': "${System.getProperty('java.vm.version')} (${System.getProperty('java.vm.vendor')})",
      'Built-On': "${project.libs.versions.jda.get()}-${project.libs.versions.chewtils.get()}",
      'Class-Path': configurations.compileClasspath.collect { it.getName() }.join(' '),
      'Main-Class': 'com.mcmoddev.mmdbot.core.RunBots'
    )
  }
}

license {
  header = project.file('LicenseHeader.md')
  include '**/*.java'
  include '**/*.kt'
  exclude '**/package-info.java'
  exclude '**/module-info.java'
  newLine = false
  properties {
    year = currentCopyrightYear()
  }
}

def currentCopyrightYear() {
  def dateFormat = new SimpleDateFormat('yyyy')
  dateFormat.setTimeZone(TimeZone.getTimeZone('UTC'))
  return dateFormat.format(new Date())
}

eclipse.project {
  buildCommand 'org.eclipse.buildship.core.gradleprojectbuilder'
  natures 'org.eclipse.buildship.core.gradleprojectnature'
}

idea.module {
  downloadJavadoc = true
  inheritOutputDirs = true
}

javadoc {
  failOnError = false
}

test {
  useJUnitPlatform()
  testLogging {
    events "passed", "skipped", "failed"
  }
}

flyway {
  url = 'jdbc:sqlite:./data.db'
  user = 'sa'
}

task generatePom {
    doLast {
        pom {
            project {
                groupId project.group.toString()
                artifactId archivesBaseName
                version version

                inceptionYear '2016'
                licenses {
                    license {
                        name 'LGPL2.1 License'
                        url 'LGPL2.1'
                        distribution 'repo'
                    }
                }
            }
        }.writeTo("$rootProject.projectDir/pom.xml")
    }
}

spotbugs {
  ignoreFailures = true
  showStackTraces = false
  toolVersion = '4.5.3'
  effort = 'max'
  reportLevel = 'low'
  //includeFilter = file("$rootProject.projectDir/config/spotbugs-filter.xml")
}

tasks.withType(com.github.spotbugs.snom.SpotBugsTask) {
  reports {
    xml.enabled = false
    html.enabled = true
  }
}

checkstyle {
  ignoreFailures = true
  toolVersion = '9.1'
  showViolations = false
}

tasks.withType(Checkstyle) {
  reports {
    xml.enabled true
    html.enabled true
//  html.stylesheet resources.text.fromFile('config/xsl/checkstyle-noframes.xsl') // Default
    html.stylesheet resources.text.fromFile('config/xsl/checkstyle-noframes-severity-sorted.xsl')
  }
}

pmd {
  consoleOutput = false
  ignoreFailures = true
  sourceSets = [sourceSets.main, sourceSets.test]
  reportsDir = file("$project.buildDir/reports/pmd")
  rulesMinimumPriority = 5
  ruleSetFiles = files('config/pmd/pmd.xml')
  ruleSets = [
/*
//  'java-android',
    'java-basic',
    'java-braces',
    'java-clone',
//  'java-codesize',
//  'java-comments',
//  'java-controversial',
//  'java-coupling',
    'java-design',
    'java-empty',
    'java-finalizers',
    'java-imports',
//  'java-j2ee',
//  'java-javabeans',
    'java-junit',
    'java-logging-jakarta-commons',
    'java-logging-java',
//  'java-metrics', // Upsets 5.8.1
    'java-migrating',
//  'java-migrating_to_13',
//  'java-migrating_to_14',
//  'java-migrating_to_15',
    'java-migrating_to_junit4',
    'java-naming',
    'java-optimizations',
//  'java-quickstart', // 6.x
    'java-strictexception',
    'java-strings',
    'java-sunsecure',
    'java-typeresolution',
    'java-unnecessary',
    'java-unusedcode'
*/
  ]
  toolVersion = '6.38.0'
  incrementalAnalysis = true
}
