import java.time.OffsetDateTime
import java.time.ZoneOffset
import java.time.format.DateTimeFormatter

plugins {
  id 'application'
  // id 'maven'
  id 'eclipse'
  id 'idea'
  id 'checkstyle'
  id 'pmd'
  alias(libs.plugins.spotbugs)
  alias(libs.plugins.shadow)
  alias(libs.plugins.flyway)
  alias(libs.plugins.licenser)
  alias(libs.plugins.kotlin)
  // alias(libs.plugins.lombok)
}

group 'com.mcmoddev'
version project.bot_version

java.toolchain.languageVersion = JavaLanguageVersion.of(16)

application {
  mainClass = 'com.mcmoddev.mmdbot.core.RunBots'
}

tasks.withType(JavaCompile).configureEach {
  options.encoding = 'UTF-8'
  options.compilerArgs = [
    '-Xlint:all', // deprecation, rawtypes, cast, unchecked, all
    //'-Xdiags:verbose',
    //'-Werror'
  ]
  compileJava.options.compilerArgs += '-proc:none'
}

configurations {
  shade
  implementation.extendsFrom(shade)

  d4j
  loggingImplementation.extendsFrom(d4j)

  global
  coreImplementation.extendsFrom(global)
  implementation.extendsFrom(global)
  loggingImplementation.extendsFrom(global)
  commanderImplementation.extendsFrom(global)
  watcherImplementation.extendsFrom(global)

  jda
  coreImplementation.extendsFrom(jda)
  implementation.extendsFrom(jda)
  commanderImplementation.extendsFrom(jda)
  watcherImplementation.extendsFrom(jda)

  globalCompile
  coreCompileOnly.extendsFrom(globalCompile)
  compileOnly.extendsFrom(globalCompile)
  loggingCompileOnly.extendsFrom(globalCompile)
  commanderCompileOnly.extendsFrom(globalCompile)
  watcherCompileOnly.extendsFrom(globalCompile)

  coreRuntimeOnly.extendsFrom(d4j)
}

sourceSets {
  core {}
  logging {}
  commander {}
  watcher {}
}

repositories {
  mavenCentral()
  //jcenter()
  maven {
    name 'm2-dv8tion'
    url 'https://m2.dv8tion.net/releases'
  }
  maven {
    name 'jda-chewtils'
    url 'https://m2.chew.pro/snapshots'
  }
  maven {
    name 'fabric'
    url 'https://maven.fabricmc.net'
  }
  maven {
    name 'quilt'
    url 'https://maven.quiltmc.org/repository/snapshot'
  }
  maven {
    name 'jitpack'
    url 'https://jitpack.io'
  }
}

dependencies {
  implementation sourceSets.core.output
  loggingImplementation sourceSets.core.output
  commanderImplementation sourceSets.core.output
  watcherImplementation sourceSets.core.output

  coreRuntimeOnly sourceSets.main.output
  coreRuntimeOnly sourceSets.logging.output
  coreRuntimeOnly sourceSets.commander.output
  coreRuntimeOnly sourceSets.watcher.output

  // globalCompile libs.lombok

  jda libs.jda
  jda libs.chewtils

  d4j libs.discord4j

  global libs.guava
  global libs.gson
  global libs.logback
  global libs.nightconfig
  global libs.sqlite
  global libs.flyway
  global libs.graal
  global libs.graal.scriptengine
  global libs.reflections
  global libs.dotenv

  globalCompile libs.annotations

  global libs.jdbi.core
  global libs.jdbi.sqlobject

  testImplementation libs.junit

  spotbugsPlugins libs.findsecbugs
}

tasks.named('shadowJar', com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar) {
  from sourceSets.core.output
  configurations = [project.configurations.jda, project.configurations.global]
}

var actualDateTime = OffsetDateTime.now(ZoneOffset.UTC).withNano(0)
var currentDateTime = DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(actualDateTime)

tasks.named(JavaPlugin.JAR_TASK_NAME, Jar).configure {
  from sourceSets.core.output

  manifest {
    mainAttributes(
      'Maven-Artifact': "${project.group}:${archivesBaseName}:${project.bot_version}",
      'Timestamp': currentDateTime,
      'Specification-Title': archivesBaseName,
      'Specification-Vendor': 'Minecraft Mod Development',
      'Specification-Version': '1',
      'Implementation-Title': archivesBaseName,
      'Implementation-Version': "${project.bot_version}",
      'Implementation-Vendor': 'Minecraft Mod Development',
      'Implementation-Timestamp': currentDateTime,
      'Built-On-Java': "${System.getProperty('java.vm.version')} (${System.getProperty('java.vm.vendor')})",
      'Built-On': "${project.libs.versions.jda.get()}-${project.libs.versions.chewtils.get()}",
      'Class-Path': configurations.compileClasspath.collect { it.getName() }.join(' '),
      'Main-Class': 'com.mcmoddev.mmdbot.core.RunBots'
    )
  }
}

license {
  header = project.file('LicenseHeader.md')
  include '**/*.java'
  include '**/*.kt'
  exclude '**/package-info.java'
  exclude '**/module-info.java'
  newLine = false
  properties {
    year = actualDateTime.getYear()
  }
}

eclipse.project {
  buildCommand 'org.eclipse.buildship.core.gradleprojectbuilder'
  natures 'org.eclipse.buildship.core.gradleprojectnature'
}

idea.module {
  downloadJavadoc = true
  inheritOutputDirs = true
}

tasks.withType(Javadoc).configureEach {
  failOnError = false
}

test {
  useJUnitPlatform()
  testLogging {
    events "passed", "skipped", "failed"
  }
}

flyway {
  url = 'jdbc:sqlite:./data.db'
  user = 'sa'
}

tasks.register('generatePom') {
    doLast {
        pom {
            project {
                groupId project.group.toString()
                artifactId archivesBaseName
                version version

                inceptionYear '2016'
                licenses {
                    license {
                        name 'LGPL2.1 License'
                        url 'LGPL2.1'
                        distribution 'repo'
                    }
                }
            }
        }.writeTo("$rootProject.projectDir/pom.xml")
    }
}

spotbugs {
  ignoreFailures = true
  showStackTraces = false
  toolVersion = '4.5.3'
  effort = 'max'
  reportLevel = 'low'
  //includeFilter = file("$rootProject.projectDir/config/spotbugs-filter.xml")
}

tasks.withType(com.github.spotbugs.snom.SpotBugsTask).configureEach {
  reports {
    xml.enabled = false
    html.enabled = true
  }
}

checkstyle {
  ignoreFailures = true
  toolVersion = '9.1'
  showViolations = false
}

tasks.withType(Checkstyle).configureEach {
  reports {
    xml.enabled true
    html.enabled true
//  html.stylesheet resources.text.fromFile('config/xsl/checkstyle-noframes.xsl') // Default
    html.stylesheet resources.text.fromFile('config/xsl/checkstyle-noframes-severity-sorted.xsl')
  }
}

pmd {
  consoleOutput = false
  ignoreFailures = true
  sourceSets = [sourceSets.main, sourceSets.test]
  reportsDir = file("$project.buildDir/reports/pmd")
  rulesMinimumPriority = 5
  ruleSetFiles = files('config/pmd/pmd.xml')
  ruleSets = [
/*
//  'java-android',
    'java-basic',
    'java-braces',
    'java-clone',
//  'java-codesize',
//  'java-comments',
//  'java-controversial',
//  'java-coupling',
    'java-design',
    'java-empty',
    'java-finalizers',
    'java-imports',
//  'java-j2ee',
//  'java-javabeans',
    'java-junit',
    'java-logging-jakarta-commons',
    'java-logging-java',
//  'java-metrics', // Upsets 5.8.1
    'java-migrating',
//  'java-migrating_to_13',
//  'java-migrating_to_14',
//  'java-migrating_to_15',
    'java-migrating_to_junit4',
    'java-naming',
    'java-optimizations',
//  'java-quickstart', // 6.x
    'java-strictexception',
    'java-strings',
    'java-sunsecure',
    'java-typeresolution',
    'java-unnecessary',
    'java-unusedcode'
*/
  ]
  toolVersion = '6.38.0'
  incrementalAnalysis = true
}
