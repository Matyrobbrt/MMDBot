import java.text.SimpleDateFormat

buildscript {
  apply from: 'dependencies.gradle'
}

plugins {
  id 'application'
  id 'com.github.johnrengelman.shadow' version "${shadow}"
//id 'maven'
  id 'eclipse'
  id 'idea'
  id 'com.github.spotbugs' version "${spotbugs}"
  id 'checkstyle'
  id 'pmd'
  id 'org.flywaydb.flyway' version "${flywaydb}"
  id 'org.jetbrains.kotlin.jvm' version "${kotlinjvm}"
  id 'org.cadixdev.licenser' version "${licenser}"
}

mainClassName = 'com.mcmoddev.mmdbot.MMDBot'
group 'com.mcmoddev'
version project.bot_version

java.toolchain.languageVersion = JavaLanguageVersion.of(16)

application {
    mainClass = 'com.mcmoddev.mmdbot.MMDBot'
}

compileJava {
  sourceCompatibility = targetCompatibility = JavaVersion.VERSION_16
  options.encoding = 'UTF-8'
}

tasks.withType(JavaCompile) {
  options.encoding = 'UTF-8'
  options.compilerArgs = [
    '-Xlint:all', // deprecation, rawtypes, cast, unchecked, all
    //'-Xdiags:verbose',
    //'-Werror'
  ]
  compileJava.options.compilerArgs += '-proc:none'
}

repositories {
  mavenCentral()
  //jcenter()
  maven {
    name 'm2-dv8tion'
    url 'https://m2.dv8tion.net/releases'
  }
  maven {
    name 'jda-chewtils'
    url 'https://m2.chew.pro/releases'
  }
  maven {
    name 'linkie'
    url 'https://maven.shedaniel.me/'
  }
  maven {
    name 'fabric'
    url 'https://maven.fabricmc.net'
  }
  maven {
    name 'quilt'
    url 'https://maven.quiltmc.org/repository/snapshot'
  }
  maven {
    name 'jitpack'
    url 'https://jitpack.io'
  }
}

dependencies {
  implementation supportDependencies.jda
  implementation supportDependencies.jdaChewtils
  implementation supportDependencies.guava
  implementation supportDependencies.gson
  implementation supportDependencies.logbackClassic
  implementation supportDependencies.nightConfig
  implementation supportDependencies.sqliteJdbc
  implementation supportDependencies.linkieCore
  implementation supportDependencies.flywayCore
  compileOnly supportDependencies.jetbrainsAnnotations

  implementation group: 'org.jetbrains.kotlinx', name: 'kotlinx-coroutines-core', version: "${project.ktx_coroutines_version}"
  implementation group: 'org.jetbrains.kotlinx', name: 'kotlinx-coroutines-jdk8', version: "${project.ktx_coroutines_version}"
  implementation group: 'org.jdbi', name: 'jdbi3-core', version: "${project.jdbi_version}"
  implementation group: 'org.jdbi', name: 'jdbi3-sqlobject', version: "${project.jdbi_version}"

  testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter', version: "${project.junit_version}"

  spotbugsPlugins "com.h3xstream.findsecbugs:findsecbugs-plugin:${project.findsecbugs_version}"
}

jar {
  manifest {
    mainAttributes(
      'Maven-Artifact': "${project.group}:${archivesBaseName}:${project.bot_version}",
      'Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
      'Specification-Title': archivesBaseName,
      'Specification-Vendor': 'Minecraft Mod Development',
      'Specification-Version': '1',
      'Implementation-Title': archivesBaseName,
      'Implementation-Version': "${project.bot_version}",
      'Implementation-Vendor': 'Minecraft Mod Development',
      'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
      'Built-On-Java': "${System.getProperty('java.vm.version')} (${System.getProperty('java.vm.vendor')})",
      'Built-On': "${jdaVersion}-${jdaChewtilsVersion}",
      'Class-Path': configurations.compileClasspath.collect { it.getName() }.join(' '),
      'Main-Class': 'com.mcmoddev.bot.MMDBot'
    )
  }
}

license {
  header = project.file('LicenseHeader.md')
  include '**/*.java'
  include '**/*.kt'
  exclude '**/package-info.java'
  exclude '**/module-info.java'
  newLine = false
  properties {
    year = currentCopyrightYear()
  }
}

def currentCopyrightYear() {
  def dateFormat = new SimpleDateFormat('yyyy')
  dateFormat.setTimeZone(TimeZone.getTimeZone('UTC'))
  return dateFormat.format(new Date())
}

eclipse.project {
  buildCommand 'org.eclipse.buildship.core.gradleprojectbuilder'
  natures 'org.eclipse.buildship.core.gradleprojectnature'
}

idea.module {
  downloadJavadoc = true
  inheritOutputDirs = true
}

javadoc {
  failOnError = false
}

test {
  useJUnitPlatform()
  testLogging {
    events "passed", "skipped", "failed"
  }
}

flyway {
  url = 'jdbc:sqlite:./data.db'
  user = 'sa'
}

task generatePom {
    doLast {
        pom {
            project {
                groupId project.group.toString()
                artifactId archivesBaseName
                version version

                inceptionYear '2016'
                licenses {
                    license {
                        name 'LGPL2.1 License'
                        url 'LGPL2.1'
                        distribution 'repo'
                    }
                }
            }
        }.writeTo("$rootProject.projectDir/pom.xml")
    }
}

spotbugs {
  ignoreFailures = true
  showStackTraces = false
  toolVersion = '4.5.3'
  effort = 'max'
  reportLevel = 'low'
  //includeFilter = file("$rootProject.projectDir/config/spotbugs-filter.xml")
}

tasks.withType(com.github.spotbugs.snom.SpotBugsTask) {
  reports {
    xml.enabled = false
    html.enabled = true
  }
}

checkstyle {
  ignoreFailures = true
  toolVersion = '8.45.1'
  showViolations = false
}

tasks.withType(Checkstyle) {
  reports {
    xml.enabled true
    html.enabled true
//  html.stylesheet resources.text.fromFile('config/xsl/checkstyle-noframes.xsl') // Default
    html.stylesheet resources.text.fromFile('config/xsl/checkstyle-noframes-severity-sorted.xsl')
  }
}

pmd {
  consoleOutput = false
  ignoreFailures = true
  sourceSets = [sourceSets.main, sourceSets.test]
  reportsDir = file("$project.buildDir/reports/pmd")
  rulesMinimumPriority = 5
  ruleSetFiles = files('config/pmd/pmd.xml')
  ruleSets = [
/*
//  'java-android',
    'java-basic',
    'java-braces',
    'java-clone',
//  'java-codesize',
//  'java-comments',
//  'java-controversial',
//  'java-coupling',
    'java-design',
    'java-empty',
    'java-finalizers',
    'java-imports',
//  'java-j2ee',
//  'java-javabeans',
    'java-junit',
    'java-logging-jakarta-commons',
    'java-logging-java',
//  'java-metrics', // Upsets 5.8.1
    'java-migrating',
//  'java-migrating_to_13',
//  'java-migrating_to_14',
//  'java-migrating_to_15',
    'java-migrating_to_junit4',
    'java-naming',
    'java-optimizations',
//  'java-quickstart', // 6.x
    'java-strictexception',
    'java-strings',
    'java-sunsecure',
    'java-typeresolution',
    'java-unnecessary',
    'java-unusedcode'
*/
  ]
  toolVersion = '6.38.0'
  incrementalAnalysis = true
}
